//采用行为描述方式实现七段显示译码器。输入A为开发板上左边的4个拨动开关，输入B为开发板上右边的4个拨动开关，输出为开发板上的8个数码管（左边4个对应A的十六进制值，右边4个对应B的十六进制值）。

`timescale 1ns / 1ps

module segment_display_decoder(
    input [7:0] sw_pin,					//8个拨动开关
    output [7:0] seg_data_0_pin, seg_data_1_pin, seg_cs_pin		//8个数码管
);

    reg [7:0] seg0, seg1;

    always @(*)                        //行为描述方式
    begin
                case({sw_pin[0],sw_pin[1],sw_pin[2],sw_pin[3]})
	               0: 	seg0 <= 8'h3f;			    //  左边的4个数码管显示“0”
	               1: 	seg0 <= 8'h06;			    //  左边的4个数码管显示“1”
	               2: 	seg0 <= 8'h5b;			    //  左边的4个数码管显示“2”
	               3: 	seg0 <= 8'h4f;			    //  左边的4个数码管显示“3”
	               4: 	seg0 <= 8'h66;			    //  左边的4个数码管显示“4”
	               5: 	seg0 <= 8'h6d;			    //  左边的4个数码管显示“5”
	               6: 	seg0 <= 8'h7d;			    //  左边的4个数码管显示“6”
	               7: 	seg0 <= 8'h07;			    //  左边的4个数码管显示“7”
	               8: 	seg0 <= 8'h7f;			    //  左边的4个数码管显示“8”
	               9: 	seg0 <= 8'h6f;			    //  左边的4个数码管显示“9”
	               10: 	seg0 <= 8'h77;			    //  左边的4个数码管显示“A”
	               11: 	seg0 <= 8'h7c;			    //  左边的4个数码管显示“b”
	               12: 	seg0 <= 8'h39;			    //  左边的4个数码管显示“c”
	               13: 	seg0 <= 8'h5e;			    //  左边的4个数码管显示“d”
	               14: 	seg0 <= 8'h79;			    //  左边的4个数码管显示“E”
	               15: 	seg0 <= 8'h71;			    //  左边的4个数码管显示“F”
	               default:     seg0 <= 8'h00;			    //  左边的4个数码管全灭
                endcase

                case({sw_pin[4],sw_pin[5],sw_pin[6],sw_pin[7]})
	               0: 	seg1 <= 8'h3f;			    //  右边的4个数码管显示“0”
	               1: 	seg1 <= 8'h06;			    //  右边的4个数码管显示“1”
	               2: 	seg1 <= 8'h5b;			    //  右边的4个数码管显示“2”
	               3: 	seg1 <= 8'h4f;			    //  右边的4个数码管显示“3”
	               4: 	seg1 <= 8'h66;			    //  右边的4个数码管显示“4”
	               5: 	seg1 <= 8'h6d;			    //  右边的4个数码管显示“5”
	               6: 	seg1 <= 8'h7d;			    //  右边的4个数码管显示“6”
	               7: 	seg1 <= 8'h07;			    //  右边的4个数码管显示“7”
	               8: 	seg1 <= 8'h7f;			    //  右边的4个数码管显示“8”
	               9: 	seg1 <= 8'h6f;			    //  右边的4个数码管显示“9”
	               10: 	seg1 <= 8'h77;			    //  右边的4个数码管显示“A”
	               11: 	seg1 <= 8'h7c;			    //  右边的4个数码管显示“b”
	               12: 	seg1 <= 8'h39;			    //  右边的4个数码管显示“c”
	               13: 	seg1 <= 8'h5e;			    //  右边的4个数码管显示“d”
	               14: 	seg1 <= 8'h79;			    //  右边的4个数码管显示“E”
	               15: 	seg1 <= 8'h71;			    //  右边的4个数码管显示“F”
	               default:     seg1 <= 8'h00;			    //  左边的4个数码管全灭
                endcase
    end

    assign seg_data_0_pin = seg0;		//左边4个数码管的8个段
    assign seg_data_1_pin = seg1;		//右边4个数码管的8个段
    assign seg_cs_pin = 8'hff;                              	//8个数码管的8个位

endmodule